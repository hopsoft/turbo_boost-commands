{
  "version": 3,
  "sources": ["../../javascript/frame_sources.js", "../../javascript/security.js", "../../javascript/elements.js", "../../javascript/event_registry.js", "../../javascript/turbo_reflex.js"],
  "sourcesContent": ["const frameSources = {}\n\n// fires after receiving a turbo HTTP response\naddEventListener('turbo:before-fetch-response', event => {\n  const frame = event.target\n  frameSources[frame.id] = frame.src\n  delete frame.dataset.turboReflexActive\n})\n\n// fires when a frame element is navigated\naddEventListener('turbo:frame-load', event => {\n  const frame = event.target\n  frame.dataset.turboReflexSrc =\n    frameSources[frame.id] || frame.src || frame.dataset.turboReflexSrc\n  delete frameSources[frame.id]\n})\n\n// fires before a stream response is rendered\naddEventListener('turbo:before-stream-render', event => {\n  const stream = event.target\n  const frame = stream.templateContent.querySelector('turbo-frame')\n  if (!frame) return\n  const frameId = frame.id\n  setTimeout(() => {\n    const f = document.getElementById(frameId)\n    f.dataset.turboReflexSrc =\n      frameSources[frame.id] || f.src || f.dataset.turboReflexSrc\n    delete frameSources[frameId]\n  }, 100)\n})\n", "const Security = {\n  get token () {\n    return document.getElementById('turbo-reflex-token').getAttribute('content')\n  }\n}\n\nexport default Security\n", "function findClosestReflex (element) {\n  return element.closest('[data-turbo-reflex]')\n}\n\nfunction findClosestFrame (element) {\n  return element.closest('turbo-frame')\n}\n\nfunction findFrameId (element) {\n  let id = element.dataset.turboReflexFrame || element.dataset.turboFrame\n  if (!id) {\n    const frame = findClosestFrame(element)\n    if (frame) id = frame.id\n  }\n  if (!id)\n    console.error(\n      `The reflex element does not specify a frame!`,\n      `Please move the reflex element inside a <turbo-frame> or set the 'data-turbo-reflex-frame' or 'data-turbo-frame' attribute.`,\n      element\n    )\n  return id\n}\n\nfunction findFrame (id) {\n  const frame = document.getElementById(id)\n  if (!frame) console.error(`The frame '${id}' does not exist!`)\n  return frame\n}\n\nfunction findFrameSrc (frame) {\n  const frameSrc = frame.dataset.turboReflexSrc || frame.src\n  if (!frameSrc)\n    console.error(\n      `The the 'src' for <turbo-frame id='${frame.id}'> is unknown!`,\n      `TurboReflex uses 'src' to (re)render frame content after the reflex is invoked.`,\n      `Please set the 'src' or 'data-turbo-reflex-src' attribute on the <turbo-frame> element.`,\n      frame\n    )\n  return frameSrc\n}\n\nfunction buildAttributePayload (element) {\n  const { tagName, value } = element\n  const tag = tagName.toLowerCase()\n  const payload = Array.from(element.attributes).reduce((memo, attr) => {\n    memo[attr.name] = attr.value\n    return memo\n  }, {})\n\n  payload.tagName = tagName\n  payload.value = value || null\n\n  if (tag === 'select') {\n    if (element.multiple) {\n      payload.values = Array.from(element.options).reduce((memo, option) => {\n        if (option.selected) memo.push(option.value)\n        return memo\n      }, [])\n    } else {\n      payload.value = element.options[element.selectedIndex].value\n    }\n  }\n\n  if (tag === 'input' && element.type === 'checkbox')\n    payload.checked = !!element.checked\n\n  return payload\n}\n\nexport {\n  findClosestReflex,\n  findClosestFrame,\n  findFrameId,\n  findFrame,\n  findFrameSrc,\n  buildAttributePayload\n}\n", "const registeredEvents = {}\nlet eventListener\n\nfunction registerEventListener (fn) {\n  eventListener = fn\n}\n\nfunction registerEvent (eventName, tagNames) {\n  registeredEvents[eventName] = tagNames\n  document.removeEventListener(eventName, eventListener, true)\n  document.addEventListener(eventName, eventListener, true)\n}\n\nfunction isRegisteredEvent (eventName, tagName) {\n  tagName = tagName.toLowerCase()\n  return (\n    registeredEvents[eventName].includes(tagName) ||\n    (!Object.values(registeredEvents)\n      .flat()\n      .includes(tagName) &&\n      registeredEvents[eventName].includes('*'))\n  )\n}\n\nexport {\n  registerEventListener,\n  registerEvent,\n  registeredEvents,\n  isRegisteredEvent\n}\n", "import './frame_sources'\nimport Security from './security'\nimport {\n  findClosestReflex,\n  findClosestFrame,\n  findFrameId,\n  findFrame,\n  findFrameSrc,\n  buildAttributePayload\n} from './elements'\nimport {\n  registerEventListener,\n  registerEvent,\n  registeredEvents,\n  isRegisteredEvent\n} from './event_registry'\n\n// fires before making a turbo HTTP request\naddEventListener('turbo:before-fetch-request', event => {\n  const frame = event.target\n  const { turboReflexActive } = frame.dataset\n  if (!turboReflexActive) return\n  const { fetchOptions } = event.detail\n  fetchOptions.headers['Turbo-Reflex'] = Security.token\n})\n\nfunction buildURL (urlString) {\n  const a = document.createElement('a')\n  a.href = urlString\n  return new URL(a)\n}\n\nfunction invokeReflex (event) {\n  const element = findClosestReflex(event.target)\n  if (!element) return\n\n  if (!isRegisteredEvent(event.type, element.tagName)) return\n\n  const frameId = findFrameId(element)\n  if (!frameId) return\n\n  const frame = findFrame(frameId)\n  if (!frame) return\n\n  const frameSrc = findFrameSrc(frame)\n  if (!frameSrc) return\n\n  const payload = {\n    frameId: frameId,\n    element: buildAttributePayload(element)\n  }\n\n  frame.dataset.turboReflexActive = true\n\n  if (element.tagName.toLowerCase() === 'form') {\n    payload.token = Security.token\n    const input = document.createElement('input')\n    input.type = 'hidden'\n    input.name = 'turbo_reflex'\n    input.value = JSON.stringify(payload)\n    element.appendChild(input)\n  } else {\n    event.preventDefault()\n    event.stopPropagation()\n    const frameURL = buildURL(frameSrc)\n    frameURL.searchParams.set('turbo_reflex', JSON.stringify(payload))\n    frame.src = frameURL.toString()\n  }\n}\n\n// wire things up and setup default events\nregisterEventListener(invokeReflex)\nregisterEvent('change', ['input', 'select', 'textarea'])\nregisterEvent('submit', ['form'])\nregisterEvent('click', ['*'])\n\nexport default { registeredEvents, registerEvent }\n"],
  "mappings": "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",
  "names": ["frameSources", "event", "frame", "frameId", "f", "Security", "security_default", "findClosestReflex", "element", "findClosestFrame", "findFrameId", "id", "frame", "findFrame", "findFrameSrc", "frameSrc", "buildAttributePayload", "tagName", "value", "tag", "payload", "memo", "attr", "option", "registeredEvents", "eventListener", "registerEventListener", "fn", "registerEvent", "eventName", "tagNames", "isRegisteredEvent", "tagName", "event", "frame", "turboReflexActive", "fetchOptions", "security_default", "buildURL", "urlString", "a", "invokeReflex", "element", "findClosestReflex", "isRegisteredEvent", "frameId", "findFrameId", "findFrame", "frameSrc", "findFrameSrc", "payload", "buildAttributePayload", "input", "frameURL", "registerEventListener", "registerEvent", "turbo_reflex_default", "registeredEvents"]
}
