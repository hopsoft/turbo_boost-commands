{
  "version": 3,
  "sources": ["../../javascript/lifecycle_events.js", "../../javascript/frame_sources.js", "../../javascript/security.js", "../../javascript/elements.js", "../../javascript/event_registry.js", "../../javascript/turbo_reflex.js"],
  "sourcesContent": ["const events = {\n  beforeStart: 'turbo-reflex:before-start',\n  start: 'turbo-reflex:start',\n  finish: 'turbo-reflex:finish',\n  error: 'turbo-reflex:error',\n  missingFrameId: 'turbo-reflex:missing-frame-id',\n  missingFrame: 'turbo-reflex:missing-frame',\n  missingFrameSrc: 'turbo-reflex:missing-frame-src'\n}\n\nfunction dispatch (name, target = document, detail = {}) {\n  const event = new CustomEvent(name, {\n    detail,\n    cancelable: true,\n    bubbles: true\n  })\n  target.dispatchEvent(event)\n}\n\nfunction logEventNames () {\n  Object.values(events).forEach(name => console.log(name))\n}\n\nexport default { ...events, dispatch, logEventNames }\n", "import LifecycleEvents from './lifecycle_events'\nconst frameSources = {}\n\n// fires after receiving a turbo HTTP response\naddEventListener('turbo:before-fetch-response', event => {\n  const frame = event.target\n  frameSources[frame.id] = frame.src\n\n  const { turboReflexActive, turboReflexElementId } = frame.dataset\n  if (!turboReflexActive) return\n\n  const element = document.getElementById(turboReflexElementId)\n  delete frame.dataset.turboReflexActive\n  delete frame.dataset.turboReflexElementId\n\n  LifecycleEvents.dispatch(LifecycleEvents.finish, element || document, {\n    frame,\n    element: element || 'Unknown! Missing id attribute.'\n  })\n})\n\n// fires when a frame element is navigated and finishes loading\naddEventListener('turbo:frame-load', event => {\n  const frame = event.target\n  frame.dataset.turboReflexSrc =\n    frameSources[frame.id] || frame.src || frame.dataset.turboReflexSrc\n  delete frameSources[frame.id]\n})\n", "const Security = {\n  get token () {\n    return document.getElementById('turbo-reflex-token').getAttribute('content')\n  }\n}\n\nexport default Security\n", "import LifecycleEvents from './lifecycle_events'\n\nfunction findClosestReflex (element) {\n  return element.closest('[data-turbo-reflex]')\n}\n\nfunction findClosestFrame (element) {\n  return element.closest('turbo-frame')\n}\n\nfunction findFrameId (element) {\n  let id = element.dataset.turboReflexFrame || element.dataset.turboFrame\n  if (!id) {\n    const frame = findClosestFrame(element)\n    if (frame) id = frame.id\n  }\n  if (!id) {\n    console.error(\n      `The reflex element does not specify a frame!`,\n      `Please move the reflex element inside a <turbo-frame> or set the 'data-turbo-reflex-frame' or 'data-turbo-frame' attribute.`,\n      element\n    )\n    LifecycleEvents.dispatch(LifecycleEvents.missingFrameId, element, {\n      element\n    })\n  }\n  return id\n}\n\nfunction findFrame (id) {\n  const frame = document.getElementById(id)\n  if (!frame) {\n    console.error(`The frame '${id}' does not exist!`)\n    LifecycleEvents.dispatch(LifecycleEvents.missingFrame, document, { id })\n  }\n  return frame\n}\n\nfunction findFrameSrc (frame) {\n  const frameSrc = frame.dataset.turboReflexSrc || frame.src\n  if (!frameSrc) {\n    console.error(\n      `The the 'src' for <turbo-frame id='${frame.id}'> is unknown!`,\n      `TurboReflex uses 'src' to (re)render frame content after the reflex is invoked.`,\n      `Please set the 'src' or 'data-turbo-reflex-src' attribute on the <turbo-frame> element.`,\n      frame\n    )\n    LifecycleEvents.dispatch(LifecycleEvents.missingFrameSrc, frame, { frame })\n  }\n  return frameSrc\n}\n\nfunction buildAttributePayload (element) {\n  const { tagName, value } = element\n  const tag = tagName.toLowerCase()\n  const payload = Array.from(element.attributes).reduce((memo, attr) => {\n    memo[attr.name] = attr.value\n    return memo\n  }, {})\n\n  payload.tagName = tagName\n  payload.value = value || null\n\n  if (tag === 'select') {\n    if (element.multiple) {\n      payload.values = Array.from(element.options).reduce((memo, option) => {\n        if (option.selected) memo.push(option.value)\n        return memo\n      }, [])\n    } else {\n      payload.value = element.options[element.selectedIndex].value\n    }\n  }\n\n  if (tag === 'input' && element.type === 'checkbox')\n    payload.checked = !!element.checked\n\n  return payload\n}\n\nexport {\n  findClosestReflex,\n  findClosestFrame,\n  findFrameId,\n  findFrame,\n  findFrameSrc,\n  buildAttributePayload\n}\n", "const registeredEvents = {}\nlet eventListener\n\nfunction registerEventListener (fn) {\n  eventListener = fn\n}\n\nfunction registerEvent (eventName, tagNames) {\n  registeredEvents[eventName] = tagNames\n  document.addEventListener(eventName, eventListener, true)\n}\n\nfunction isRegisteredEvent (eventName, tagName) {\n  tagName = tagName.toLowerCase()\n  return (\n    registeredEvents[eventName].includes(tagName) ||\n    (!Object.values(registeredEvents)\n      .flat()\n      .includes(tagName) &&\n      registeredEvents[eventName].includes('*'))\n  )\n}\n\nfunction logRegisteredEvents () {\n  console.log(registeredEvents)\n}\n\nexport {\n  registerEventListener,\n  registerEvent,\n  registeredEvents,\n  isRegisteredEvent,\n  logRegisteredEvents\n}\n", "import './frame_sources'\nimport Security from './security'\nimport LifecycleEvents from './lifecycle_events'\nimport {\n  findClosestReflex,\n  findClosestFrame,\n  findFrameId,\n  findFrame,\n  findFrameSrc,\n  buildAttributePayload\n} from './elements'\nimport {\n  registerEventListener,\n  registerEvent,\n  registeredEvents,\n  isRegisteredEvent,\n  logRegisteredEvents\n} from './event_registry'\n\n// fires before making a turbo HTTP request\naddEventListener('turbo:before-fetch-request', event => {\n  const frame = event.target\n  const { turboReflexActive } = frame.dataset\n  if (!turboReflexActive) return\n  const { fetchOptions } = event.detail\n  fetchOptions.headers['Turbo-Reflex'] = Security.token\n})\n\nfunction buildURL (urlString) {\n  const a = document.createElement('a')\n  a.href = urlString\n  return new URL(a)\n}\n\nfunction invokeReflex (event) {\n  let element, frameId, frame, frameSrc\n  try {\n    element = findClosestReflex(event.target)\n    if (!element) return\n\n    if (!isRegisteredEvent(event.type, element.tagName)) return\n\n    LifecycleEvents.dispatch(LifecycleEvents.beforeStart, element, { element })\n\n    frameId = findFrameId(element)\n    if (!frameId) return\n\n    frame = findFrame(frameId)\n    if (!frame) return\n\n    frameSrc = findFrameSrc(frame)\n    if (!frameSrc) return\n\n    const payload = {\n      frameId: frameId,\n      element: buildAttributePayload(element)\n    }\n\n    LifecycleEvents.dispatch(LifecycleEvents.start, element, {\n      element,\n      frameId,\n      frame,\n      frameSrc,\n      payload\n    })\n    frame.dataset.turboReflexActive = true\n    frame.dataset.turboReflexElementId = element.id\n\n    if (element.tagName.toLowerCase() === 'form') {\n      payload.token = Security.token\n      const input = document.createElement('input')\n      input.type = 'hidden'\n      input.name = 'turbo_reflex'\n      input.value = JSON.stringify(payload)\n      element.appendChild(input)\n    } else {\n      event.preventDefault()\n      const frameURL = buildURL(frameSrc)\n      frameURL.searchParams.set('turbo_reflex', JSON.stringify(payload))\n      frame.src = frameURL.toString()\n    }\n  } catch (error) {\n    console.error(\n      `TurboReflex encountered an unexpected error!`,\n      { element, frameId, frame, frameSrc, target: event.target },\n      error\n    )\n    LifecycleEvents.dispatch(LifecycleEvents.error, element || document, {\n      element,\n      frameId,\n      frame,\n      frameSrc,\n      error\n    })\n  }\n}\n\n// wire things up and setup default events\nregisterEventListener(invokeReflex)\nregisterEvent('change', ['input', 'select', 'textarea'])\nregisterEvent('submit', ['form'])\nregisterEvent('click', ['*'])\n\nexport default {\n  registerEvent,\n  logRegisteredEvents,\n  logLifecycleEventNames: LifecycleEvents.logEventNames\n}\n"],
  "mappings": "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",
  "names": ["events", "dispatch", "name", "target", "detail", "event", "logEventNames", "lifecycle_events_default", "frameSources", "event", "frame", "turboReflexActive", "turboReflexElementId", "element", "lifecycle_events_default", "Security", "security_default", "findClosestReflex", "element", "findClosestFrame", "findFrameId", "id", "frame", "lifecycle_events_default", "findFrame", "findFrameSrc", "frameSrc", "buildAttributePayload", "tagName", "value", "tag", "payload", "memo", "attr", "option", "registeredEvents", "eventListener", "registerEventListener", "fn", "registerEvent", "eventName", "tagNames", "isRegisteredEvent", "tagName", "logRegisteredEvents", "event", "frame", "turboReflexActive", "fetchOptions", "security_default", "buildURL", "urlString", "a", "invokeReflex", "element", "frameId", "frameSrc", "findClosestReflex", "isRegisteredEvent", "lifecycle_events_default", "findFrameId", "findFrame", "findFrameSrc", "payload", "buildAttributePayload", "input", "frameURL", "error", "registerEventListener", "registerEvent", "turbo_reflex_default", "logRegisteredEvents"]
}
