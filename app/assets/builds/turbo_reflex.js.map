{
  "version": 3,
  "sources": ["../../javascript/lifecycle_events.js", "../../javascript/frame_sources.js", "../../javascript/elements.js", "../../javascript/event_registry.js", "../../javascript/turbo_reflex.js"],
  "sourcesContent": ["const events = {\n  beforeStart: 'turbo-reflex:before-start',\n  start: 'turbo-reflex:start',\n  finish: 'turbo-reflex:finish',\n  error: 'turbo-reflex:error',\n  missingFrameId: 'turbo-reflex:missing-frame-id',\n  missingFrame: 'turbo-reflex:missing-frame',\n  missingFrameSrc: 'turbo-reflex:missing-frame-src'\n}\n\nfunction dispatch (name, target = document, detail = {}) {\n  const event = new CustomEvent(name, {\n    detail,\n    cancelable: true,\n    bubbles: true\n  })\n  target.dispatchEvent(event)\n}\n\nfunction logEventNames () {\n  Object.values(events).forEach(name => console.log(name))\n}\n\nexport default { ...events, dispatch, logEventNames }\n", "import LifecycleEvents from './lifecycle_events'\nconst frameSources = {}\n\n// fires after receiving a turbo HTTP response\naddEventListener('turbo:before-fetch-response', event => {\n  const frame = event.target\n  frameSources[frame.id] = frame.src\n\n  const { turboReflexActive, turboReflexElementId } = frame.dataset\n  if (!turboReflexActive) return\n\n  const element = document.getElementById(turboReflexElementId)\n  delete frame.dataset.turboReflexActive\n  delete frame.dataset.turboReflexElementId\n\n  LifecycleEvents.dispatch(LifecycleEvents.finish, element || document, {\n    frame,\n    element: element || 'Unknown! Missing id attribute.'\n  })\n})\n\n// fires when a frame element is navigated and finishes loading\naddEventListener('turbo:frame-load', event => {\n  const frame = event.target\n  frame.dataset.turboReflexSrc =\n    frameSources[frame.id] || frame.src || frame.dataset.turboReflexSrc\n  delete frameSources[frame.id]\n})\n", "import LifecycleEvents from './lifecycle_events'\n\nconst metaElements = {\n  get turboReflex () {\n    return document.getElementById('turbo-reflex')\n  },\n\n  get turboReflexToken () {\n    return document.getElementById('turbo-reflex-token')\n  }\n}\n\nfunction findClosestReflex (element) {\n  return element.closest('[data-turbo-reflex]')\n}\n\nfunction findClosestFrame (element) {\n  return element.closest('turbo-frame')\n}\n\nfunction findFrameId (element) {\n  let id = element.dataset.turboFrame\n  if (!id) {\n    const frame = findClosestFrame(element)\n    if (frame) id = frame.id\n  }\n  return id\n}\n\nfunction findFrame (id) {\n  const frame = document.getElementById(id)\n  if (!frame) {\n    console.error(`The frame '${id}' does not exist!`)\n    LifecycleEvents.dispatch(LifecycleEvents.missingFrame, document, { id })\n  }\n  return frame\n}\n\nfunction findFrameSrc (frame) {\n  const frameSrc = frame.dataset.turboReflexSrc || frame.src\n  if (!frameSrc) {\n    console.error(\n      `The the 'src' for <turbo-frame id='${frame.id}'> is unknown!`,\n      `TurboReflex uses 'src' to (re)render frame content after the reflex is invoked.`,\n      `Please set the 'src' or 'data-turbo-reflex-src' attribute on the <turbo-frame> element.`,\n      frame\n    )\n    LifecycleEvents.dispatch(LifecycleEvents.missingFrameSrc, frame, { frame })\n  }\n  return frameSrc\n}\n\nfunction assignElementValueToPayload (element, payload = {}) {\n  if (element.tagName.toLowerCase() !== 'select')\n    return (payload.value = element.value)\n\n  if (!element.multiple)\n    return (payload.value = element.options[element.selectedIndex].value)\n\n  payload.values = Array.from(element.options).reduce((memo, option) => {\n    if (option.selected) memo.push(option.value)\n    return memo\n  }, [])\n}\n\nfunction buildAttributePayload (element) {\n  const payload = Array.from(element.attributes).reduce((memo, attr) => {\n    memo[attr.name] = attr.value\n    return memo\n  }, {})\n\n  payload.tag = element.tagName\n  payload.checked = element.checked\n  payload.disabled = element.disabled\n  assignElementValueToPayload(element, payload)\n\n  return payload\n}\n\nexport {\n  buildAttributePayload,\n  findClosestReflex,\n  findClosestFrame,\n  findFrameId,\n  findFrame,\n  findFrameSrc,\n  metaElements\n}\n", "const registeredEvents = {}\nlet eventListener\n\nfunction registerEventListener (fn) {\n  eventListener = fn\n}\n\nfunction registerEvent (eventName, tagNames) {\n  registeredEvents[eventName] = tagNames\n  document.addEventListener(eventName, eventListener, true)\n}\n\nfunction isRegisteredEvent (eventName, tagName) {\n  tagName = tagName.toLowerCase()\n  return (\n    registeredEvents[eventName].includes(tagName) ||\n    (!Object.values(registeredEvents)\n      .flat()\n      .includes(tagName) &&\n      registeredEvents[eventName].includes('*'))\n  )\n}\n\nfunction logRegisteredEvents () {\n  console.log(registeredEvents)\n}\n\nexport {\n  registerEventListener,\n  registerEvent,\n  registeredEvents,\n  isRegisteredEvent,\n  logRegisteredEvents\n}\n", "import './frame_sources'\nimport LifecycleEvents from './lifecycle_events'\nimport {\n  buildAttributePayload,\n  findClosestReflex,\n  findClosestFrame,\n  findFrameId,\n  findFrame,\n  findFrameSrc,\n  metaElements\n} from './elements'\nimport {\n  registerEventListener,\n  registerEvent,\n  registeredEvents,\n  isRegisteredEvent,\n  logRegisteredEvents\n} from './event_registry'\n\n// fires before making a turbo HTTP request\naddEventListener('turbo:before-fetch-request', event => {\n  const frame = event.target\n  if (frame !== metaElements.turboReflex.frame) return\n  const { fetchOptions } = event.detail\n  fetchOptions.headers[\n    'TurboReflex-Token'\n  ] = metaElements.turboReflexToken.getAttribute('content')\n})\n\nfunction buildURL (urlString) {\n  const a = document.createElement('a')\n  a.href = urlString\n  return new URL(a)\n}\n\nfunction invokeFrameReflex (frame, payload) {\n  const src = findFrameSrc(frame)\n  if (!src) return\n  const url = buildURL(src)\n  url.searchParams.set('turbo_reflex', JSON.stringify(payload))\n  frame.dataset.turboReflexActive = true\n  frame.src = url.toString()\n}\n\nfunction invokeFormReflex (form, payload = {}) {\n  payload.token = metaElements.turboReflexToken.getAttribute('content')\n  const input = document.createElement('input')\n  input.type = 'hidden'\n  input.name = 'turbo_reflex'\n  input.value = JSON.stringify(payload)\n  form.appendChild(input)\n}\n\nfunction invokeWindowReflex (payload) {\n  const url = buildURL(window.location.href)\n  url.searchParams.set('turbo_reflex', JSON.stringify(payload))\n  const xhr = new XMLHttpRequest()\n  xhr.open('GET', url, true)\n  xhr.setRequestHeader(\n    'TurboReflex-Token',\n    metaElements.turboReflexToken.getAttribute('content')\n  )\n  xhr.addEventListener('load', () => {\n    const head = '<turbo-stream'\n    const tail = '</turbo-stream>'\n    const headIndex = xhr.responseText.indexOf(head)\n    const tailIndex = xhr.responseText.lastIndexOf(tail)\n    if (headIndex >= 0 && tailIndex >= 0) {\n      const streams = xhr.responseText.slice(headIndex, tailIndex + tail.length)\n      document.body.insertAdjacentHTML('beforeend', streams)\n    }\n  })\n  xhr.addEventListener('error', () => {\n    // TODO: handle errors\n    debugger\n  })\n  xhr.addEventListener('abort', () => {\n    // TODO: handle aborts\n    debugger\n  })\n  xhr.send()\n}\n\nfunction invokeReflex (event) {\n  let detail = {}\n\n  try {\n    let element = findClosestReflex(event.target)\n    if (!element) return\n    if (!isRegisteredEvent(event.type, element.tagName)) return\n\n    LifecycleEvents.dispatch(LifecycleEvents.beforeStart, element)\n\n    const frameId = findFrameId(element)\n    let frame\n    if (frameId) {\n      frame = findFrame(frameId)\n      if (!frame) return\n    }\n\n    let driver = 'window'\n    if (frame) driver = 'frame'\n    if (element.tagName.toLowerCase() === 'form') driver = 'form'\n\n    const payload = { driver, element: buildAttributePayload(element) }\n    detail = { ...payload, frame, element }\n    const dataset = { busy: true, driver, reflex: element.dataset.turboReflex }\n\n    metaElements.turboReflex.frame = frame\n    Object.assign(metaElements.turboReflex.dataset, dataset)\n    LifecycleEvents.dispatch(LifecycleEvents.start, element, detail)\n\n    if (driver !== 'form') event.preventDefault()\n\n    switch (driver) {\n      case 'frame':\n        invokeFrameReflex(frame, payload)\n        break\n      case 'form':\n        invokeFormReflex(element, payload)\n        break\n      case 'window':\n        invokeWindowReflex(payload)\n        break\n    }\n  } catch (error) {\n    detail.error = error\n    console.error(`TurboReflex encountered an unexpected error!`, detail)\n    LifecycleEvents.dispatch(LifecycleEvents.error, element || document, detail)\n  }\n}\n\n// wire things up and setup default events\nregisterEventListener(invokeReflex)\nregisterEvent('change', ['input', 'select', 'textarea'])\nregisterEvent('submit', ['form'])\nregisterEvent('click', ['*'])\n\nexport default {\n  registerEvent,\n  logRegisteredEvents,\n  logLifecycleEventNames: LifecycleEvents.logEventNames\n}\n"],
  "mappings": "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",
  "names": ["events", "dispatch", "name", "target", "detail", "event", "logEventNames", "lifecycle_events_default", "frameSources", "event", "frame", "turboReflexActive", "turboReflexElementId", "element", "lifecycle_events_default", "metaElements", "findClosestReflex", "element", "findClosestFrame", "findFrameId", "id", "frame", "findFrame", "lifecycle_events_default", "findFrameSrc", "frameSrc", "assignElementValueToPayload", "payload", "memo", "option", "buildAttributePayload", "attr", "registeredEvents", "eventListener", "registerEventListener", "fn", "registerEvent", "eventName", "tagNames", "isRegisteredEvent", "tagName", "logRegisteredEvents", "event", "metaElements", "fetchOptions", "buildURL", "urlString", "a", "invokeFrameReflex", "frame", "payload", "src", "findFrameSrc", "url", "invokeFormReflex", "form", "input", "invokeWindowReflex", "xhr", "head", "tail", "headIndex", "tailIndex", "streams", "invokeReflex", "detail", "element", "findClosestReflex", "isRegisteredEvent", "lifecycle_events_default", "frameId", "findFrameId", "findFrame", "driver", "buildAttributePayload", "dataset", "error", "registerEventListener", "registerEvent", "turbo_reflex_default", "logRegisteredEvents"]
}
