{
  "version": 3,
  "sources": ["../../javascript/turbo_reflex.js"],
  "sourcesContent": ["const registeredEvents = {}\nconst frameSources = {}\n\n// fires before making a turbo HTTP request\naddEventListener('turbo:before-fetch-request', event => {\n  const frame = event.target\n  const { turboReflexActive } = frame.dataset\n  if (turboReflexActive) {\n    const { fetchOptions } = event.detail\n    fetchOptions.headers['Turbo-Reflex'] = event.target.id\n  }\n})\n\n// fires after receiving a turbo HTTP response\naddEventListener('turbo:before-fetch-response', event => {\n  const frame = event.target\n  frameSources[frame.id] = frame.src\n  delete frame.dataset.turboReflexActive\n})\n\n// fires when a frame element is navigated\naddEventListener('turbo:frame-load', event => {\n  const frame = event.target\n  frame.dataset.turboReflexSrc =\n    frameSources[frame.id] || frame.src || frame.dataset.turboReflexSrc\n  delete frameSources[frame.id]\n})\n\n// fires before a stream response is rendered\naddEventListener('turbo:before-stream-render', event => {\n  const stream = event.target\n  const frame = stream.templateContent.querySelector('turbo-frame')\n  if (!frame) return\n  const frameId = frame.id\n  setTimeout(() => {\n    const f = document.getElementById(frameId)\n    f.dataset.turboReflexSrc =\n      frameSources[frame.id] || f.src || f.dataset.turboReflexSrc\n    delete frameSources[frameId]\n  }, 100)\n})\n\nfunction isMatch (eventName, tagName) {\n  tagName = tagName.toLowerCase()\n  return (\n    registeredEvents[eventName].includes(tagName) ||\n    (!Object.values(registeredEvents)\n      .flat()\n      .includes(tagName) &&\n      registeredEvents[eventName].includes('*'))\n  )\n}\n\nfunction getFrameId (reflexElement) {\n  let frameId =\n    reflexElement.dataset.turboReflexFrame || reflexElement.dataset.turboFrame\n  if (!frameId) {\n    const frame = reflexElement.closest('turbo-frame')\n    if (frame) frameId = frame.id\n  }\n  if (!frameId)\n    console.error(\n      `The reflex element does not specify a frame!`,\n      `Please move the reflex element inside a <turbo-frame> or set the 'data-turbo-reflex-frame' or 'data-turbo-frame' attribute.`,\n      reflexElement\n    )\n  return frameId\n}\n\nfunction getFrameElement (frameId) {\n  const frameElement = document.getElementById(frameId)\n  if (!frameElement) console.error(`The frame '${frameId}' does not exist!`)\n  return frameElement\n}\n\nfunction getFrameSrc (frameElement) {\n  const frameSrc = frameElement.dataset.turboReflexSrc || frameElement.src\n  if (!frameSrc)\n    console.error(\n      `The the 'src' for frame '${frameElement.id}' is unknown!`,\n      `TurboReflex uses 'src' to (re)render frame content after the reflex is invoked.`,\n      `Please set the 'src' or 'data-turbo-reflex-src' attribute on the <turbo-frame> element.`,\n      frameElement\n    )\n  return frameSrc\n}\n\nfunction getTurboReflexToken () {\n  return document.getElementById('turbo-reflex-token').getAttribute('content')\n}\n\nfunction getURL (value) {\n  const a = document.createElement('a')\n  a.href = value\n  return new URL(a)\n}\n\nfunction getAttributes (reflexElement) {\n  const reflexElementAttributes = Array.from(reflexElement.attributes).reduce(\n    (memo, attribute) => {\n      if (!attribute.name.includes('data-turbo-reflex'))\n        memo[attribute.name] = attribute.value\n      return memo\n    },\n    {}\n  )\n  reflexElementAttributes.tagName = reflexElement.tagName\n  reflexElementAttributes.value = reflexElement.value\n\n  if (reflexElement.tagName.toLowerCase() === 'select') {\n    if (reflexElement.multiple) {\n      reflexElementAttributes.values = Array.from(reflexElement.options).reduce(\n        (memo, option) => {\n          if (option.selected) memo.push(option.value)\n          return memo\n        },\n        []\n      )\n    } else {\n      reflexElementAttributes.value =\n        reflexElement.options[reflexElement.selectedIndex].value\n    }\n  }\n\n  if (\n    reflexElement.tagName.toLowerCase() === 'input' &&\n    reflexElement.type === 'checkbox'\n  ) {\n    reflexElementAttributes.checked = !!reflexElement.checked\n  }\n\n  return reflexElementAttributes\n}\n\nfunction invokeReflex (event) {\n  const reflexElement = event.target.closest('[data-turbo-reflex]')\n  if (!reflexElement) return\n  if (!isMatch(event.type, reflexElement.tagName)) return\n\n  const frameId = getFrameId(reflexElement)\n  if (!frameId) return\n\n  const frameElement = getFrameElement(frameId)\n  if (!frameElement) return\n\n  const frameSrc = getFrameSrc(frameElement)\n  if (!frameSrc) return\n\n  const reflexPayload = {\n    token: getTurboReflexToken(),\n    name: reflexElement.dataset.turboReflex,\n    frame: frameId,\n    element: getAttributes(reflexElement)\n  }\n\n  frameElement.dataset.turboReflexActive = true\n\n  if (reflexElement.tagName.toLowerCase() === 'form') {\n    const input = document.createElement('input')\n    input.type = 'hidden'\n    input.name = 'turbo_reflex'\n    input.value = JSON.stringify(reflexPayload)\n    reflexElement.appendChild(input)\n  } else {\n    event.preventDefault()\n    event.stopPropagation()\n    const frameURL = getURL(frameSrc)\n    frameURL.searchParams.set('turbo_reflex', JSON.stringify(reflexPayload))\n    frameElement.src = frameURL.toString()\n  }\n}\n\nfunction registerEvent (eventName, tagNames) {\n  registeredEvents[eventName] = tagNames\n  document.removeEventListener(eventName, invokeReflex, true)\n  document.addEventListener(eventName, invokeReflex, true)\n}\n\nregisterEvent('change', ['input', 'select', 'textarea'])\nregisterEvent('submit', ['form'])\nregisterEvent('click', ['*'])\n\nexport default { registerEvent, registeredEvents }\n"],
  "mappings": "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",
  "names": ["registeredEvents", "frameSources", "event", "frame", "turboReflexActive", "fetchOptions", "frameId", "f", "isMatch", "eventName", "tagName", "getFrameId", "reflexElement", "getFrameElement", "frameElement", "getFrameSrc", "frameSrc", "getTurboReflexToken", "getURL", "value", "a", "getAttributes", "reflexElementAttributes", "memo", "attribute", "option", "invokeReflex", "reflexPayload", "input", "frameURL", "registerEvent", "tagNames", "turbo_reflex_default"]
}
