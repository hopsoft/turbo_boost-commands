<section>
  <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
    <div class="max-w-screen-md">
      <h2 class="mb-4 text-4xl font-extrabold tracking-tight text-gray-900 dark:text-white">
        Unlock <span class="opacity-70">the true potential of</span> Turbo Frames <span class="opacity-70">with</span> TurboBoost Commands ðŸš€
      </h2>

      <p class="text-gray-500 sm:text-xl dark:text-gray-400">
        Are you looking to supercharge your Ruby on Rails and Hotwire applications?
        <strong class="text-gray-900 dark:text-white">Look no further!</strong>
        TurboBoost is the ultimate complementary tool suite for Hotwire that's designed to speed up and simplify the creation of reactive applications.
      </p>
    </div>

    <div class="my-12 space-y-8 md:grid md:grid-cols-2 md:gap-12 md:my-20 md:space-y-0 lg:grid-cols-3">
      <%= render "features/feature", icon: :beaker, heading: "Hybrid Solutions" do %>
        Strict REST semantics for everything can have diminishing returns.
        TurboBoost <i>Commands</i> give you <em>more flexibility</em> by allowing you to "sprinkle"
        in remote procedure calls (RPC) when needed, reducing boilerplate and helping you focus on the task at hand.
      <% end %>

      <%= render "features/feature", icon: :square_3_stack_3d, heading: "Isolated Concerns" do %>
        Developing a <em>clean and maintainable</em> codebase is crucial.
        TurboBoost <i>Commands</i> help you avoid non-RESTful routes and minimize fat models and controllers.
        You'll write less code that's more organized, testable, and sustainable.
      <% end %>

      <%= render "features/feature", icon: :puzzle_piece, heading: "Seamless Integrations" do %>
        TurboBoost <i>Commands</i> have been designed to work perfectly with both Rails and Hotwire.
        They enhance your existing workflow...
        and you can introduce their game-changing techniques gradually to your current projects with <em>zero risk</em>.
      <% end %>

      <%= render "features/feature", icon: :hand_thumb_up, heading: "Standard Mechanics" do %>
        TurboBoost <i>Commands</i> are simply plain Ruby methods that are invoked by a Rails controller <code>before_action</code>.
        After they execute some discrete business logic, normal Rails behavior resumes control.
        It <em>couldn't be simpler</em>.
      <% end %>

      <%= render "features/feature", icon: :light_bulb, heading: "Conventional Concepts" do %>
        At a high level, TurboBoost <i>Commands</i> share the same mental model as popular client-side frameworks like React,
        but moving responsiblities to the server vastly <em>reduces the complexity</em> of triggering events, changing state, and re-rendering.
      <% end %>

      <%= render "features/feature", icon: :lightning_bolt, heading: "Reliable Protocols" do %>
        TurboBoost <i>Commands</i> use standard HTTP,
        so the tools you use for monitoring and optimizing normal web requests will also work for your reactive features...
        helping you build performant, reliable, and <em>great user experiences</em>.
      <% end %>
    </div>


    <div class="max-w-screen-md">
      <a href="#" class="inline-flex justify-center items-center py-3 px-5 mr-3 text-base font-medium text-center text-white rounded-lg focus:ring-4 bg-primary-700 dark:focus:ring-primary-900 hover:bg-primary-800 focus:ring-primary-300">
        Get started
        <svg class="ml-2 -mr-1 w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
      </a>
    </div>
</section>
