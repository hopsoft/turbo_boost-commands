<div class="marketing[features]">
  <div>
    <div><%= render heroicon(:beaker), solid: true %></div>
    <h3>Hybrid Solutions</h3>
    <p>
      Strict REST semantics for everything can have diminishing returns.
      TurboBoost <i>Commands</i> give you <em>more flexibility</em> by allowing you to "sprinkle"
      in remote procedure calls (RPC) when needed, reducing boilerplate and helping you focus on the task at hand.
    </p>
  </div>

  <div>
    <div><%= render heroicon(:square_3_stack_3d), solid: true %></div>
    <h3>Isolated Concerns</h3>
    <p>
      Developing a <em>clean and maintainable</em> codebase is crucial.
      TurboBoost <i>Commands</i> help you avoid non-RESTful routes and minimize fat models and controllers.
      You'll write less code that's more organized, testable, and sustainable.
    </p>
  </div>

  <div>
    <div><%= render heroicon(:puzzle_piece), solid: true %></div>
    <h3>Seamless Integrations</h3>
    <p>
      TurboBoost <i>Commands</i> have been designed to work perfectly with both Rails and Hotwire.
      They enhance your existing workflow...
      and you can introduce their game-changing techniques gradually to your current projects with <em>zero risk</em>.
    </p>
  </div>

  <div>
    <div><%= render heroicon(:hand_thumb_up), solid: true %></div>
    <h3>Standard Mechanics</h3>
    <p>
      TurboBoost <i>Commands</i> are simply plain Ruby methods that are invoked by a Rails controller <code>before_action</code>.
      After they execute some discrete business logic, normal Rails behavior resumes control.
      It <em>couldn't be simpler</em>.
    </p>
  </div>

  <div>
    <div><%= render heroicon(:light_bulb), solid: true %></div>
    <h3>Conventional Concepts</h3>
    <p>
      At a high level, TurboBoost <i>Commands</i> share the same mental model as popular client-side frameworks like React,
      but moving responsiblities to the server vastly <em>reduces the complexity</em> of triggering events, changing state, and re-rendering.
    </p>
  </div>

  <div>
    <div><%= render heroicon(:lightning_bolt), solid: true %></div>
    <h3>Reliable Protocols</h3>
    <p>
      TurboBoost <i>Commands</i> use standard HTTP,
      so the tools you use for monitoring and optimizing normal web requests will also work for your reactive features...
      helping you build performant, reliable, and <em>great user experiences</em>.
    </p>
  </div>
</div>
